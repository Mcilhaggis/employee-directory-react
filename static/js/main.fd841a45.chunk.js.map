{"version":3,"sources":["components/Header.js","components/Form.js","components/ResultsHead.js","components/ResultsBody.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Form","updateUsers","user","type","onChange","event","result","filter","person","name","first","includes","target","value","console","log","ResultsHead","sortByName","sortByPhone","sortByEmail","sortByDob","onClick","ResultsBody","image","phone","email","dob","src","alt","date","dateArray","split","year","join","formatDate","Container","getEmployees","a","fetch","then","results","json","data","setState","error","users","state","order","sort","b","reverse","cell","this","map","id","picture","thumbnail","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd841a45.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport \"./style.css\";\n\n\nfunction Header() {\n    return(\n        <div className=\"header\">\n        <h1>Employee Directory</h1>\n        <p>Click the carrots to filter by catagory or start typing to filter by name</p>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"../App.css\";\nimport \"./style.css\";\n\n\nfunction Form({updateUsers, user}) {\n    //we pass in a function that we write in the main compoenent that allows us to update the state of the users\n    //we also pass in the user state in its original state\n\n   function handleInputChange(event) {\n       //filtering the current user array to only show values that include what has been typed into the search bar as of yet\n        const result = user.filter(person =>\n            {\n                //event.target.value gets the exact input of the search bar at any time\n            return person.name.first.includes(event.target.value)\n        })\n        console.log(result)\n        //send the filtered array to the main component\n            updateUsers(result)\n      };\n\n\n    return (\n        <div className=\"form\">\n            <form>\n                {/* add the call to the function above here */}\n                <input type=\"text\" className=\"searchButton\" onChange={handleInputChange}></input>\n            </form>\n        </div>\n    )\n}\n\nexport default Form;","import React from \"react\";\nimport \"../App.css\";\nimport \"./style.css\";\n\n//the curly braces takes things from the state and passes them into the props/ into the components\n\nconst ResultsHead = ({sortByName, sortByPhone, sortByEmail, sortByDob }) => {\n\n\n    return (\n                <thead className=\"Results\">\n                    <tr>\n                        <th>Image</th>\n                        <th onClick={sortByName}>Name</th>\n                        <th onClick={sortByPhone}>Phone</th>\n                        <th onClick={sortByEmail}>Email</th>\n                        <th onClick={sortByDob}>DOB</th>\n                    </tr>\n                </thead>\n    )\n    \n}\n\nexport default ResultsHead;","import React from \"react\";\nimport \"../App.css\";\nimport \"./style.css\";\n\n//the curly braces takes things from the state and passes them into the props/ into the components\n\nconst ResultsBody = ({image, name, phone, email, dob}) => {\n\n    function formatDate(date) {\n        const dateArray = date.split(\"-\");\n        const year = dateArray[0];\n        const month = dateArray[1];\n        const dayArray = dateArray[2].split(\"T\");\n        const day = dayArray[0];\n        const formattedDate = [month, day, year].join(\"-\");\n        \n        return formattedDate;\n      };\n\n\n    return (\n                    <tr>\n                        <td><img src={image} alt=\"images of employees\"></img></td>\n                        <td>{name}</td>\n                        <td>{phone}</td>\n                        <td>{email}</td>\n                        <td>{formatDate(dob)}</td>\n                    </tr>\n    )\n    \n}\n\nexport default ResultsBody;","import React, { Component } from \"react\";\n// import '../App.css';\nimport Header from \"./Header.js\";\nimport Form from \"./Form.js\";\nimport ResultsHead from \"./ResultsHead.js\";\nimport ResultsBody from \"./ResultsBody.js\";\nimport \"./style.css\";\n\n\n\nclass Container extends Component {\n\n    //Initailising the objects state\n    constructor() {\n        //super initalises 'this' to be used in a constructor\n        super();\n        this.state = {\n            user: [],\n            error: null,\n            order: true\n        }\n    }\n    //setting the loading state to true and running the api call\n    componentDidMount() {\n        //since we are now fetching the api data we set loading to true\n        this.getEmployees();\n    }\n\n\n    //Make async call to the API \n    getEmployees = async () => {\n        try {\n            await fetch('https://randomuser.me/api/?results=50&inc=id,picture,name,cell,email,dob')\n                .then(results => {\n                    return results.json();\n                })\n                .then(data => {\n                    console.log(data.results)\n                    let user = data.results\n                    this.setState({ user: user });\n                });\n        }\n        catch (error) {\n            this.setState({ error: error });\n        }\n    }\n\n    updateUsers = (users) => {\n        this.setState({ user: users });\n    }\n\n    sortByName = () => {\n        this.setState({\n            users: this.state.order \n            ? this.state.user.sort((a,b) => {\n            if(a.name.first < b.name.first) return -1;\n            if(a.name.first > b.name.first) return 1;\n            return 0;\n        })\n            : this.state.users.reverse((a,b) => {\n                if(a.name.first < b.name.first) return 1;\n                if(a.name.first > b.name.first) return -1;\n                return 0;\n            }),\n            order: !this.state.order\n        })\n    }\n\n    sortByPhone = () => {\n        this.setState({\n            users: this.state.order \n            ? this.state.user.sort((a,b) => {\n            if(a.cell < b.cell) return -1;\n            if(a.cell > b.cell) return 1;\n            return 0;\n        })\n            : this.state.users.reverse((a,b) => {\n                if(a.cell < b.cell) return 1;\n                if(a.cell > b.cell) return -1;\n                return 0;\n            }),\n            order: !this.state.order\n        })\n    }\n\n    sortByEmail = () => {\n        this.setState({\n            users: this.state.order \n            ? this.state.user.sort((a,b) => {\n            if(a.email < b.email) return -1;\n            if(a.email > b.email) return 1;\n            return 0;\n        })\n            : this.state.users.reverse((a,b) => {\n                if(a.email < b.email) return 1;\n                if(a.email > b.email) return -1;\n                return 0;\n            }),\n            order: !this.state.order\n        })\n    }\n\n    sortByDob = () => {\n        this.setState({\n            users: this.state.order \n            ? this.state.user.sort((a,b) => {\n            if(a.dob < b.dob) return -1;\n            if(a.dob > b.dob) return 1;\n            return 0;\n        })\n            : this.state.users.reverse((a,b) => {\n                if(a.dob < b.dob) return 1;\n                if(a.dob > b.dob) return -1;\n                return 0;\n            }),\n            order: !this.state.order\n        })\n    }\n\n    render() {\n\n        return (<div>\n            <Header />\n            <Form \n            // passing in the updateUsers function to be used in the form component\n            updateUsers={this.updateUsers}\n            //passing in the users to the form component\n            user={this.state.user}/>\n            <div className='container'>\n                <table className=\"table\">\n                    <ResultsHead \n                    sortByName={this.sortByName}\n                    sortByPhone={this.sortByPhone}\n                    sortByEmail={this.sortByEmail}\n                    sortByDob={this.sortByDob}\n                    />\n\n                    <tbody>\n                        {this.state.user.map((users, id) => (\n\n                            <ResultsBody\n                                key={id}\n                                image={users.picture.thumbnail}\n                                name={users.name.first}\n                                phone={users.cell}\n                                email={users.email}\n                                dob={users.dob.date}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n\n        </div>\n\n        )\n\n    }\n}\n\n\nexport default Container;\n","import React from \"react\";\nimport Container from \"./components/Container.js\";\n\nfunction App() {\n  return <Container />;\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}